/* 
I would recommend the best way to format this is to use flexboxes within grids. 
The grid will make the layout of the content, while the flexboxes will sort everything within one of the grid cells.
You don't have to make the grids all uniform either! You can make the different rows have different sizes.
Here's an example: https://japanese-grid.webflow.io/
*/

body {
    font-family: sans-serif;
    /* Add font family, background colour, text colour, etc. */
}

.grid {
    display: grid;

    grid-template-columns: repeat(3, auto);
    grid-template-rows: repeat(3, auto);

    /* 
    Include all grid specifications here.
    For example:

    grid-template-columns: 50% 50%;
    grid-template-rows: 50% 50%;

    This code snippet will create a 2x2 grid where each square is about 25% of the screen.
    Percentages are a good method to split up the grid, but you can also use 'auto' and 'repeat' and those will split them up as well.

    grid-template-columns: auto auto;
    grid-template-rows: auto auto;

    This will create a 2x2 grid as well, but the sizes are auto so you don't have to calculate the percentages.
    Percentages and auto and 'em' unit are the best to use in grids and flexboxes because they are responsive and will change with the screen size. Instead of a set number of pts or pixels, which will become warped with resizing.
     */
}

.flexbox {
    display: flex;

    flex-direction: column;
    align-items: center;

    /* 
    Include all flexbox specifications here.
    For example:

    align-items: center;
    justify-content: center;

    This code snippet will make it so all of the items within your flexbox will be completely centered.
    If you would rather them be left or right aligned vertically, and your flex-direction is ROW then you change the justify-content.

    justify-content: flex-start;
    OR
    justify-content: flex-end;

    If you would rather the items be aligned to the bottom or top of the box and your flex-direction is ROW, then you change the align-items.

    align-items: top;
    OR
    align-items: bottom;

    Otherwise, the purposes of align-itmes and justify-content switch if your flex-direction is COLUMN.
     */
}

/* Responsive Design */
@media screen and (max-width: 400px) {
    /* Anything within these brackets will be only applied if the maximum width of the screen is 400px, or around the size of an average phone screen. */

    .grid {
        display: grid;

        grid-template-columns: 100%;
        grid-template-rows: auto;

        /* 
        Usually for the grid, I would just make it a single column grid that has multiple rows.
        
        grid-template-rows: auto;
        grid-template-columns: 100%;
        */
    }

    .flexbox {
        display: flex;
    }
}